<!DOCTYPE html>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8' />
<title>{{ antl.formatMessage('main.title') }}</title>
<meta name='Resource-type' content='Document' />
<meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no'>
{{ style('/css/app') }}
<link rel='stylesheet' type='text/css' href='css/fullpage.min.css' />
<link href='https://fonts.googleapis.com/css?family=Roboto:400,700&display=swap' rel='stylesheet'>
<script type="text/javascript" src="//fast.fonts.net/jsapi/19ea23e7-8381-43e1-bbe6-2877c2bac311.js"></script>
<style>
customLog {
  display: block;
  position: fixed;
  left: 0;
  bottom: 10px;
  right: 0;
  top: 290px;
  z-index: 1000;
  background-color: white;
  color: black;
  overflow-x: hidden;
  overflow-y: scroll;
}

html, body {
  padding: 0;
  margin: 0;
  font-family: 'Roboto', sans-serif;
  -webkit-text-size-adjust: none;
}
body:not(.ready) > * {
  opacity: 0;
}
body.resizing * {
  transition: none !important;
}
h1.logo {
  font-weight: normal;
  font-family:'Spring LP W01 Regular';
  color: white;
  display: block;
  z-index: 1;
  position: relative;
  text-align: center;
  width: 350px;
  font-size: 140px;
  line-height: 240px;
  height: 315px;
  overflow: hidden;
  margin: 0 auto;
  transform: scale(.8);
  transition: transform 200ms cubic-bezier(.2,0,.4,1), margin-top 200ms, opacity 200ms ease 200ms;
}
h1.logo span {
  position: relative;
  left: -10px;
}
@media ( max-width: 500px ), ( max-height: 800px ){
  h1.logo {
    width: 280px;
    font-size: 112px;
    line-height: 192px;
    height: 252px;
  }
  h1.logo span {
    left: -8px;
  }
}
@media ( max-height: 600px ){
  h1.logo {
    margin-top: -30px;
    width: 175px;
    font-size: 70px;
    line-height: 120px;
    height: 158px;
  }
  h1.logo span {
    left: -5px;
  }
}
@media ( max-height: 500px ){
  body.need h1.logo {
    margin-top: -158px;
    opacity: 0;
    transition: transform 200ms cubic-bezier(.2,0,.4,1), margin-top 200ms, opacity 100ms;
  }
}
@media ( max-height: 300px ){
  h1.logo {
    margin-top: 0;
  }
}
body.need h1.logo {
  transform: scale(.9);
}
h1.logo svg {
  width: 100%;
  z-index: -1;
  position: absolute;
  left: 0;
  top: 0;
}
.heart {
  fill: rgba(0,0,0,.9);
}



@media ( max-width: 700px ){
  #menu {
    display: none;
  }
}
#menu li {
  display: inline-block;
}
#menu li:hover a,
#menu li.active a {
  color: #000;
  transition: none;
}
#menu li a {
  text-decoration:none;
  color: rgba(0,0,0,.5);
  transition: color 1s;
}
#menu li a {
  padding: 9px 18px;
  display: block;
}
#menu {
  position: fixed;
  top: 0;
  left: 0;
  z-index: 70;
  width: 100%;
  padding: 0;
  margin: 0;
  text-align: center;
  transition: opacity 500ms;
  transition-delay: 350ms;
}
body.need #menu {
  opacity: 0;
  pointer-events: none;
  transition: opacity 1s cubic-bezier(0,1,0,1);
  transition-delay: 0;
}




.section h1 {
  text-align: center;
  font-weight: normal;
}
body.need #fullpage > .section:not(.gethelp) {
  display: none;
}
#fullpage {
  transition: opacity 400ms;
}
/*.section.gethelp {
  background-image: url(img/hand_mock002.jpg);
  background-repeat: no-repeat;
  background-size: 1700px;
  background-position: 49% 10%;
}*/



img.hands {
  left: 50%;
  width: 100px;
  margin-left: -50px;
  margin-top: -30px;
  display: block;
  position: absolute;
  transform: scale(.8);
  transition: transform 200ms cubic-bezier(.2,0,.4,1);
  transform-origin: 50% 0;
}
@media ( max-height: 300px ){ body.need img.hands { opacity: 0; } }
body.need img.hands {
  transform: none;
}




needs {
  display: block;
  text-align: center;
  line-height: 0;
  margin-left: auto;
  margin-right: auto;
  transition: margin-top 400ms;
}
/*@media ( max-width: 500px ){ needs { max-width: 390px; } }*/
/*@media ( max-height: 300px ){ body.need needs { margin-top: -10px; } }*/
needs > div {
  position: relative;
  vertical-align: top;
  background-color: rgba(0,0,0,.9);
  text-align: center;
  color: white;
  cursor: pointer;
  transition: background-color 1s cubic-bezier(0,1,0,1), opacity 200ms cubic-bezier(1,0,1,0), margin 500ms cubic-bezier(1,0,0,1), width 500ms cubic-bezier(1,0,0,1), height 200ms, font-size 300ms cubic-bezier(.2,0,.4,1), border-radius 300ms;
  width: 200px;
  height: 100px;
  font-size: 20px;
  margin-left: auto;
  margin-right: auto;
  max-width: 90%;
}
@media ( max-width: 500px ){ needs > div { transition: background-color 1s cubic-bezier(0,1,0,1), opacity 200ms cubic-bezier(1,0,1,0), margin 500ms cubic-bezier(1,0,0,1), width 500ms cubic-bezier(0,1,0,1), height 200ms, font-size 300ms cubic-bezier(.2,0,.4,1), border-radius 300ms; } }
@media ( min-width: 501px ){ needs > div { display: inline-block; margin-left: 0; margin-right: 0; } }
needs table {
  border-collapse: collapse;
  width: 100%;
  height: 100%;
}
@media ( max-height: 700px ){ needs > div { height: 80px; } }
@media ( max-height: 500px ){ needs > div { height: 60px; } }
@media ( max-height: 450px ){ needs > div { height: 55px; } }
needs > div:not(:first-child):before {
  content: '';
  display: block;
  position: absolute;
  pointer-events: none;
  background: white;
  opacity: .1;
  top: 20px;
  bottom: 20px;
  width: 2px;
  left: -1px;
}
                             needs > div:first-child { border-top-left-radius: 10px; }
@media ( min-width: 501px ){ needs > div:first-child { border-bottom-left-radius: 10px; } }
                             needs > div:last-child  { border-bottom-right-radius: 10px; }
@media ( min-width: 501px ){ needs > div:last-child  { border-top-right-radius: 10px; } }
@media ( max-width: 500px ){ needs > div { border-radius: 10px; } needs > div:not(:first-child):before { display: none; } body:not(.need) needs > div:not(:first-child) { margin-top: 2px; } }
needs > div:hover {
  background-color: rgba(0,0,0,.8);
  transition: opacity 400ms cubic-bezier(0,1,0,1), margin 500ms cubic-bezier(1,0,0,1), width 500ms, height 200ms, font-size 300ms cubic-bezier(.2,0,.4,1), border-radius 1s;
}
needs > div:active {
  background-color: rgba(0,0,0,.7);
  transition: opacity 400ms cubic-bezier(0,1,0,1), margin 500ms cubic-bezier(1,0,0,1), width 500ms, height 200ms, font-size 300ms cubic-bezier(.2,0,.4,1), border-radius 1s;
}
needs td {
  padding: 0;
  text-align: center;
  vertical-align: middle;
  white-space: nowrap;
  /*transition: width 500ms cubic-bezier(1,0,0,1);*/
}
needs td::-moz-selection     { background: transparent; }
needs td::selection          { background: transparent; }
needs > .hidden {
  transition: background-color 1s cubic-bezier(0,1,0,1), opacity 400ms cubic-bezier(0,1,0,1), margin 500ms cubic-bezier(1,0,0,1), width 500ms cubic-bezier(1,0,0,1), height 200ms, font-size 300ms cubic-bezier(.2,0,.4,1), border-radius 1s;
  opacity: 0;
}
@media ( max-width: 600px ) and ( min-width: 501px ){ needs > div     { width: 33.3%; } }
@media ( max-width: 500px ){                          needs > .hidden { height: 0; } }
@media ( min-width: 501px ){                          needs > .hidden { width: 0; } }
body.need needs > div {
  pointer-events: none;
}
body.need needs > div:not(.hidden) {
  background-color: rgba(0,0,0,.9);
  color: white;
  font-size: 23px;
  border-top-left-radius: 10px;
  border-top-right-radius: 10px;
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
  width: 400px;
  max-width: 90%;
}





.section.gethelp form {
  overflow: hidden;
  height: 0;
  transition: height 400ms, box-shadow 400ms;
  width: 90%;
  max-width: 400px;
  margin: 0 auto;
  border-bottom-left-radius: 10px;
  border-bottom-right-radius: 10px;
  overflow: hidden;
  display: block;
  background-color: #f8f8f8;
  box-shadow:
    0 1px 0 0 transparent,
    0 1px 5px 0 transparent,
    0 1px 50px 0 transparent
  ;
}
body.need .section.gethelp form {
  height: 320px;
  box-shadow:
    0 1px 0 0 rgba(0,0,0,.1),
    0 1px 5px 0 rgba(0,0,0,.1),
    0 1px 50px 0 rgba(0,0,0,.1)
  ;
}
@media ( max-height: 700px ){ body.need .section.gethelp form { height: 240px; } }
@media ( max-height: 500px ){ body.need .section.gethelp form { height: 220px; } }
.section.gethelp form inputwrap:last-child,
.section.gethelp form inputwrap:nth-last-child(2) {
  width: 50%;
  float: left;
}
inputwrap {
  display: block;
  position: relative;
  box-shadow: -1px -1px 0 0 rgba(0,0,0,.05);
}
inputwrap > input::-moz-focus-inner {
  border: 0;
}
inputwrap > * {
  border-radius: 0;
  font-family: 'Roboto', sans-serif;
  text-align: center;
  box-sizing: border-box;
  outline: none;
  background: none;
  border: none;
  margin: 0;
  display: block;
  box-shadow: none;
  width: 100%;
  font-size: 17px;
  background-color: #f8f8f8;
  padding: 30px 7px;
  line-height: 20px;
}
@media ( max-height: 700px ){ inputwrap > * { padding-bottom: 20px; padding-top: 20px; } }
@media ( max-height: 500px ){ inputwrap > * { padding-bottom: 15px; } }
inputwrap > button {
  cursor: pointer;
}
inputwrap > *,
inputwrap placeholder {
  color: #333;
  transition: color 300ms, background-color 300ms;
}
inputwrap > *:hover,
inputwrap.mouseover placeholder {
  transition: color 70ms, background-color 70ms;
}
inputwrap.mouseover placeholder {
  color: #777;
}
inputwrap.focus placeholder {
  color: #999;
}
inputwrap.mousedown placeholder {
  color: #aaa;
  transition: none;
}
inputwrap > *:hover,
inputwrap > *:focus {
  background: white;
}
inputwrap fx1,
inputwrap fx2 {
  position: absolute;
  pointer-events: none;
  left: 0;
  bottom: 0;
  right: 0;
  height: 2px;
  padding: 0;
  transform: scale3d(0,1,1);
  transition: transform 400ms, background-color 400ms;
}
inputwrap fx1 {
  background: #ddd;
}
inputwrap fx2 {
  background: black;
}
inputwrap.mousedown fx2 {
  background: #999;
  transition: transform 400ms;
}
inputwrap.mouseover fx1,
inputwrap.focus fx2,
inputwrap.mousedown fx2 {
  transform: scale3d(1,1,1);
}
inputwrap placeholder {
  position: absolute;
  top: 0;
  pointer-events: none;
  background: transparent;
  transition: font-size 120ms, letter-spacing 120ms, line-height 120ms, padding-top 120ms;
}
inputwrap.focus placeholder,
inputwrap.hasText placeholder {
  padding-top: 4px;
  font-size: 12px;
  line-height: 19px;
  letter-spacing: .1em;
  transition: font-size 70ms, letter-spacing 70ms, line-height 70ms, padding-top 70ms;
}
@media ( max-height: 500px ){ inputwrap.focus placeholder, inputwrap.hasText placeholder { padding-top: 2px; } }



.action {
  text-transform: uppercase;
}
                    #cancel        { color:      #b44; }
                    #cancel:hover  { color:      #d66; }
                    #cancel:active { color:      #933; }
                    #cancel ~ fx1  { background: #d66; }
                    #cancel ~ fx2  { background: #d66; }
inputwrap.mousedown #cancel ~ fx2  { background: #933; }

                    #send          { color: #3b9859; }
                    #send:hover    { color: #4eba71; }
                    #send:active   { color: #2f7a47; }
                    #send   ~ fx1  { background: #3b9859; }
                    #send   ~ fx2  { background: #3b9859; }
inputwrap.mousedown #send   ~ fx2  { background: #2f7a47; }





arrowdown {
  position: absolute;
  display: block;
  left: 50%;
  bottom: 0;
  width: 90px;
  height: 90px;
  margin-left: -45px;
  transform: scale(1,.62);
  transform-origin: 50% 100%;
  cursor: pointer;
  transition: opacity 900ms;
}
arrowdown:before {
  content: '';
  display: block;
  position: absolute;
  pointer-events: none;
  width: 20%;
  height: 20%;
  left: 40%;
  top: 40px;
  transform: rotate(45deg);
  box-sizing: border-box;
  border-bottom: solid 1px black;
  border-right: solid 1px black;
  opacity: .5;
  transition: top 100ms;
}
arrowdown:hover:before {
  opacity: .8;
  top: 44px;
  transition: top 100ms;
}
arrowdown:active:before {
  opacity: 1;
  top: 48px;
  transition: top 100ms;
}
body.need arrowdown,
arrowdown.removing {
  opacity: 0;
  pointer-events: none;
}
@media ( max-height: 480px ){
  arrowdown {
    opacity: 0;
    pointer-events: none;
  }
}
</style>
</head>
<body>
<ul id='menu'><li data-menuanchor='gethelp' class='active'><a href='#gethelp'>Get Help</a></li><li data-menuanchor='helpothers'><a href='#helpothers'>Help Others</a></li><li data-menuanchor='safety'><a href='#safety'>Safety</a></li><li data-menuanchor='about'><a href='#about'>About</a></li></ul>
<div id='fullpage'>
  <div class='section gethelp' id='section0'>
    <!-- <img class='hands' src='img/hands.png'> -->
    <h1 class='logo'><span>Jelpi</span>
      <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
         viewBox="0 0 1000 900" style="enable-background:new 0 0 1000 900;" xml:space="preserve">
      <g>
        <g>
          <path class="heart" d="M741.51,0C568.01,0,500,147,500,147S431.99,0,258.49,0S0,137.24,0,294c0,318,419,606,500,606s500-288,500-606
  C1000,137.24,915,0,741.51,0z"/>
        </g>
      </g>
      </svg>
    </h1>
    <needs>
      <div data-type='medicine'><table><tr><td>I need medicine</td></tr></table></div><div data-type='food'><table><tr><td>I need food</td></tr></table></div><div data-type='supplies'><table><tr><td>I need supplies</td></tr></table></div>
    </needs>
    <form>
      <inputwrap><input type='text'><fx1></fx1><fx2></fx2><placeholder>My name</placeholder></inputwrap>
      <inputwrap><input type='text'><fx1></fx1><fx2></fx2><placeholder>My location</placeholder></inputwrap>
      <inputwrap><input type='text'><fx1></fx1><fx2></fx2><placeholder>My status</placeholder></inputwrap>
      <inputwrap><button id='cancel' class='action'>Cancel</button><fx1></fx1><fx2></fx2></inputwrap>
      <inputwrap><button id='send' class='action'>Send</button><fx1></fx1><fx2></fx2></inputwrap>
    </form>
  </div>
  <div class='section helpothers' id='section1'>
    <h1>Help Others</h1>
  </div>
  <div class='section safety' id='section2'>
    <h1>Safety</h1>
  </div>
  <div class='section about' id='section3'>
    <h1>About</h1>
  </div>
</div>
<script type='text/javascript' src='js/fullpage.min.js'></script>
<script type='text/javascript'>
window.l = console.log;
let Jelpi = {};
Jelpi.helper = {
  isAndroid: () => {
    return navigator.userAgent.toLowerCase().indexOf('android') > -1;
  },
  isTouch: () => {
    try {
      document.createEvent("TouchEvent");
      return true;
    } catch (e) {}
    return false;
  }
}
Jelpi.main = class {
  constructor() {
    this.frontPage = new Jelpi.frontPage(this);
  }
  pushEmptyUrl() {

    const state = {};
    const title = '';
    const url = '.';
    history.pushState(state, title, url);
  }
  init() {
    this.frontPage.init();
  }
  test() {
    document.querySelector('table').click();
  }
}
Jelpi.fullpageScroller = class {
  constructor(parent) {
    this.parent = parent;
    this.selector = '#fullpage';
    this.options = {
      sectionsColor:      ['#f4f4f4', '#f4f4f4', '#f4f4f4', '#f4f4f4'],
      anchors:            ['gethelp', 'helpothers', 'safety', 'about'],
      showActiveTooltip:  true,
      menu:               '#menu'
    };
    this.onHashChangeCallback = this.onHashChange.bind(this);
  }
  onHashChange(event) {
    history.back();
    this.parent.parent.pushEmptyUrl();
  }
  init() {
    this.fullpage = new fullpage( this.selector, this.options );
    this.arrowDown();
  }
  arrowDown() {
    if( this.hasOwnProperty('_arrowDown') ){
      return this._arrowDown;
    }
    let element = document.createElement('arrowdown');
    this._arrowDown = element;
    element.addEventListener('click', this.onArrowDownClick.bind(this));
    document.getElementById('section0').appendChild( element );
    return element;
  }
  onArrowDownClick() {
    location.href = '#helpothers';
    this.arrowDown().classList.add('removing');
    setTimeout(() => {
      this.arrowDown().remove();
    }, 300 );
  }
  destroy() {
      Jelpi.helper.isAndroid()
    ? this.fullpage.destroy()
    : window.addEventListener('hashchange', this.onHashChangeCallback, false);
  }
  undestroy() {
    location.href = '#gethelp';
    Jelpi.helper.isAndroid() ? window.scrollTo(0,0) : window.removeEventListener('hashchange', this.onHashChangeCallback, false);
  }
}
Jelpi.frontPage = class {
  constructor(parent) {
    this.parent = parent;
    this.fullpageScroller = new Jelpi.fullpageScroller(this);
    this.needs = new Jelpi.needs(this);
    this.cancelButton = new Jelpi.cancelButton(this);
    this.sendButton = new Jelpi.sendButton(this);
    // this.iCanHelpButton = new Jelpi.iCanHelpButton(this);
    this.inputs = new Jelpi.inputs(this);
  }
  init() {
    window.addEventListener('resize', this.onResize.bind(this));
    this.fullpageScroller.init();
    this.needs.init();
    this.cancelButton.init();
    this.sendButton.init();
    // this.iCanHelpButton.init();
    this.inputs.init();
    setTimeout(()=> { document.body.classList.add('ready'); }, 20);
  }
  onNeed() {
    document.body.classList.add('need');
    this.fullpageScroller.destroy();
    this.parent.pushEmptyUrl();
    let onTimeout = () => {
      document.querySelector('input').focus();
    };
    let shouldAutoFocus = !Jelpi.helper.isTouch() || Jelpi.helper.isAndroid();
    shouldAutoFocus && setTimeout( onTimeout, 200 );
  }
  onCancel() {
    document.body.classList.remove('need');
    this.fullpageScroller.undestroy();
    this.needs.onCancel();
  }
  onResize() {
    document.body.classList.add('resizing');
    let onTimeout = () => {
      document.body.classList.remove('resizing');
    }
    clearTimeout( this.resizeTimeout );
    this.resizeTimeout = setTimeout(onTimeout, 100);
  }
}
Jelpi.inputs = class {
  constructor(parent) {
    this.parent = parent;
    this.array = [];
  }
  init() {
    this.elements().map( this.initElement.bind(this) );
    this.array.map( input => input.init() );
  }
  elements() {
    let array = [];
    let elements = document.querySelectorAll('inputwrap');
    for(let i = 0; i < elements.length; i++){
      let element = elements[i];
      array.push(element);
    }
    return array;
  }
  initElement(element) {
    let need = new Jelpi.input(this, element);
    this.array.push(need);
  }
}
Jelpi.input = class {
  constructor(parent, element) {
    this.parent = parent;
    this.element = element;
  }
  init() {
    let element = this.element.querySelector('input, button');
    element.addEventListener('mouseover', this.onMouseOver.bind(this));
    element.addEventListener('mouseout', this.onMouseOut.bind(this));
    element.addEventListener('mousedown', this.onMouseDown.bind(this));
    element.addEventListener('mouseup', this.onMouseUp.bind(this));
    element.addEventListener('focus', this.onFocus.bind(this));
    element.addEventListener('blur', this.onBlur.bind(this));
    element.addEventListener('keydown', this.onChange.bind(this));
  }
  onMouseOver() {
    this.element.classList.add('mouseover');
  }
  onMouseOut() {
    this.element.classList.remove('mouseover');
  }
  onMouseDown() {
    this.element.classList.add('mousedown');
  }
  onMouseUp() {
    this.element.classList.remove('mousedown');
  }
  onFocus() {
    this.element.classList.add('focus');
  }
  onBlur() {
    this.element.classList.remove('focus');
  }
  onChange() {
    let element = this.element.querySelector('input');
    if( !element ){
      return;
    }
    let onAnimationFrame = () => {
      let method = element.value.trim().length ? 'add' : 'remove';
      this.element.classList[ method ]('hasText');
    }
    window.requestAnimationFrame( onAnimationFrame );
  }
}
Jelpi.cancelButton = class {
  constructor(parent) {
    this.parent = parent;
  }
  init() {
    this.element().addEventListener('click', this.onClick.bind(this));
  }
  element() {
    return document.getElementById('cancel');
  }
  onClick(event) {
    event.preventDefault();
    event.stopPropagation();
    this.parent.onCancel();
  }
}
Jelpi.sendButton = class {
  constructor(parent) {
    this.parent = parent;
  }
  init() {
    this.element().addEventListener('click', this.onClick.bind(this));
  }
  element() {
    return document.getElementById('send');
  }
  onClick(event) {
    event.preventDefault();
    event.stopPropagation();
    if( this.sending ){
      return;
    }
    this.sending = true;
    console.log('send');
  }
}
Jelpi.iCanHelpButton = class {
  constructor(parent) {
    this.parent = parent;
  }
  init() {
    this.element().addEventListener('click', this.onClick.bind(this));
  }
  element() {
    return document.getElementById('icanhelp');
  }
  onClick(event) {
    event.preventDefault();
    event.stopPropagation();
    window.location = '#helpothers';
  }
}
Jelpi.needs = class {
  constructor(parent) {
    this.parent = parent;
    this.array = [];
  }
  init() {
    this.elements().map( this.initElement.bind(this) );
    this.array.map( need => need.init() );
  }
  elements() {
    let array = [];
    let elements = document.querySelectorAll('needs > div');
    for(let i = 0; i < elements.length; i++){
      let element = elements[i];
      array.push(element);
    }
    return array;
  }
  initElement(element) {
    let need = new Jelpi.need(this, element);
    this.array.push(need);
  }
  onNeed(instance) {
    this.parent.onNeed();
    this.array.map( need => need.fadeOutConditionally(instance) );
  }
  onCancel() {
    this.array.map( need => need.fadeIn() );
  }
}
Jelpi.need = class {
  constructor(parent, element) {
    this.parent = parent;
    this.element = element;
    this.type = this.element.getAttribute('data-type');
  }
  init() {
    this.element.addEventListener( 'click', this.onClick.bind(this) );
  }
  onClick(event) {
    event.preventDefault();
    event.stopPropagation();
    this.parent.onNeed(this);
  }
  fadeOutConditionally(instance) {
    if( this === instance ){
      return;
    }
    this.element.classList.add( 'hidden' );
  }
  fadeIn() {
    this.element.classList.remove( 'hidden' );
  }
}

if( /SM-G950F/.test( navigator.userAgent )
|| 1
){
  class CustomLogger {
    log(x) {
      this.element().appendChild( this.makeLoggableElement(x) );
      this.element().scrollTop = 1000000000;
    }
    makeLoggableElement(x) {
      let element = document.createElement('div');
      element.innerText = JSON.stringify( x );
      return element;
    }
    element() {
      if( this.hasOwnProperty('_element') ){
        return this._element;
      }
      let element = document.createElement('customLog');
      this._element = element;
      document.body.appendChild(element);
      return element;
    }
  }
  let customLogger = new CustomLogger();
  window.l = customLogger.log.bind(customLogger);
  // l(navigator.userAgent);
}

window.jelpi = new Jelpi.main();
window.jelpi.init();
// /^https?:\/\/127\.0\.0\.1/.test(location.href) && window.jelpi.test();
</script>
</body>
</html>
